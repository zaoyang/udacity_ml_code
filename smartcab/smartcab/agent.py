from __future__ import division
import random
import math
from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator
from random import randint
import cPickle
import operator

class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """ 

    def __init__(self, env, learning=False, epsilon=1.0, alpha=0.5):
        super(LearningAgent, self).__init__(env)     # Set the agent in the evironment 
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions

        # Set parameters of the learning agent
        self.learning = learning # Whether the agent is expected to learn
        self.Q = dict()          # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon   # Random exploration factor
        self.alpha = alpha       # Learning factor

        ###########
        ## TO DO ##
        ###########
        # Set any additional class parameters as needed


    def reset(self, destination=None, testing=False, total_trials=1):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """

        # Select the destination as the new location to route to
        self.planner.route_to(destination)
        
        ########### 
        ## TO DO ##
        ###########
        # Update epsilon using a decay function of your choice
        # Update additional class parameters as needed
        # If 'testing' is True, set epsilon and alpha to 0
        if(testing == True):
            self.epsilon = 0
            self.alpha = 0
        else:
            # print "Starting alpha ", self.alpha
            # print "Starting epislon", self.epsilon


            # self.epsilon = math.e ** -(self.alpha * total_trials)
            # self.epsilon = self.alpha ** (total_trials/16)
            self.epsilon = 10/ ( total_trials)
            # self.epsilon = math.e ** -(1/8 * total_trials)

            # self.alpha = 0.2
            self.alpha = 13/total_trials

            # print "Ending alpha ", self.alpha
            # print "Ending epislon", self.epsilon

            if self.epsilon > 1:
                self.epsilon = 1
            if self.alpha > 1:
                self.alpha = 1


        return None

    def build_state(self):
        """ The build_state function is called when the agent requests data from the 
            environment. The next waypoint, the intersection inputs, and the deadline 
            are all features available to the agent. """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint() # The next waypoint 
        inputs = self.env.sense(self)           # Visual input - intersection light and traffic
        self.deadline = self.env.get_deadline(self)  # Remaining deadline

        ########### 
        ## TO DO ##
        ###########
        # Set 'state' as a tuple of relevant data for the agent

        state = {}
        state['inputs'] = inputs
        # state['deadline'] = deadline
        state['waypoint'] = waypoint

        return state


    def get_maxQ(self, state):
        """ The get_max_Q function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """

        ########### 
        ## TO DO ##
        ###########
        # Calculate the maximum Q-value of all actions for a given state

        pickledStr = cPickle.dumps(state)
        maxQ = max(self.Q[pickledStr].iteritems(), key=operator.itemgetter(1))[1]

        return maxQ 


    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """

        ########### 
        ## TO DO ##
        ###########
        # When learning, check if the 'state' is not in the Q-table
        # If it is not, create a new dictionary for that state
        #   Then, for each action available, set the initial Q-value to 0.0

        pickledState = cPickle.dumps(state)

        if self.learning == True: # if state is in Q table
            if not (pickledState in self.Q.keys()):
                self.Q[pickledState] = {None : 0.0, 'right': 0.0, 'left': 0.0, 'forward': 0.0}


        return


    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """

        # Set the agent state and default action
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()
        action = None

        ########### 
        ## TO DO ##
        ###########
        # When not learning, choose a random action
        # When learning, choose a random action with 'epsilon' probability
        #   Otherwise, choose an action with the highest Q-value for the current state

        pickledState = cPickle.dumps(state)
        if self.learning == False:

            randomInt = randint(0, len(self.valid_actions) - 1)
            action = self.valid_actions[randomInt]
        else:
            randomValue = random.random()
            if randomValue < self.epsilon: # do random action
                action = random.choice(self.valid_actions)
            else: # rational action, given the same max Q choose a random choice
                if pickledState in self.Q.keys():
                    # print (self.Q[pickledState])
                    # print type(self.Q[pickledState])
                    # print cPickle.loads(pickledState)
                    maxQ = self.get_maxQ(state)
                    possibleActions = [(k) for (k,v) in self.Q[pickledState].iteritems() if v == maxQ]
                    action = random.choice(possibleActions)

                    print
                    print "Current Q to pick from ", self.Q[pickledState]
                    print "Possible Actions", possibleActions
                    print

        return action


    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives an award. This function does not consider future rewards 
            when conducting learning. """

        ########### 
        ## TO DO ##
        ###########
        # When learning, implement the value iteration update rule
        #   Use only the learning rate 'alpha' (do not use the discount factor 'gamma')
        # Q(s, a) = r + alpha * max_a Q(s, a)
        pickledState = cPickle.dumps(state)
        if self.learning == True:
            if pickledState in self.Q.keys():
                print
                print "Previous state:  ", state
                print "Chosen action: ",action
                print "Last violation: ", self.env.lastViolation
                print "Reward for action:  ", reward
                print "Previous Q value: ", self.Q[pickledState][action]
                print "Previous Q array: ", self.Q[pickledState]
                print "Agent epsilon {} alpha {} ".format(self.epsilon, self.alpha)
                print "Current location: ", self.planner.getCurrentLocation()
                print "Destination location: ", self.planner.getDestinationLocation()
                print "Distance from location: ", self.env.compute_dist(self.planner.getCurrentLocation(), self.planner.getDestinationLocation())
                print "Deadline: ", self.deadline

                self.Q[pickledState][action] = self.alpha * reward + (1- self.alpha) * self.Q[pickledState][action]
                print "New Q value: ", self.Q[pickledState][action]
                print "New Q array: ", self.Q[pickledState]
                print
                print


        return


    def update(self):
        """ The update function is called when a time step is completed in the 
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()          # Get current state
        self.createQ(state)                 # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action) # Receive a reward
        self.learn(state, action, reward)   # Q-learn

        return
        

def run():
    """ Driving function for running the simulation. 
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment(verbose=True)
    
    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    agent = env.create_agent(LearningAgent, learning=True, epsilon=1.0, alpha=0.5)
    
    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent, enforce_deadline=True)

    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #   optimized    - set to True to change the default log file name
    sim = Simulator(env, update_delay= 0.0000001, display=False, log_metrics=True, optimized=True)

    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05 
    #   n_test     - discrete number of testing trials to perform, default is 0
    sim.run(tolerance=0.01, n_test=50)


if __name__ == '__main__':
    run()
